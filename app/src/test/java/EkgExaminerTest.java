import com.iuridiniz.checkmyecg.examiners.EkgExaminer;

import org.apache.commons.math3.stat.StatUtils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import java.util.LinkedList;

/**
 * Created by iuri on 01/12/15.
 */

public class EkgExaminerTest {

    /* file: test \(22).jpg -- V4, first two signals */
    static final double[] REAL_SIGNAL_X = {0.0, 0.00266666666667, 0.00533333333333, 0.008, 0.0106666666667, 0.0133333333333, 0.016, 0.0186666666667, 0.0213333333333, 0.024, 0.0266666666667, 0.0293333333333, 0.032, 0.0346666666667, 0.0373333333333, 0.04, 0.0426666666667, 0.0453333333333, 0.048, 0.0506666666667, 0.0533333333333, 0.056, 0.0586666666667, 0.0613333333333, 0.064, 0.0666666666667, 0.0693333333333, 0.072, 0.0746666666667, 0.0773333333333, 0.08, 0.0826666666667, 0.0853333333333, 0.088, 0.0906666666667, 0.0933333333333, 0.096, 0.0986666666667, 0.101333333333, 0.104, 0.106666666667, 0.109333333333, 0.112, 0.114666666667, 0.117333333333, 0.12, 0.122666666667, 0.125333333333, 0.128, 0.130666666667, 0.133333333333, 0.136, 0.138666666667, 0.141333333333, 0.144, 0.146666666667, 0.149333333333, 0.152, 0.154666666667, 0.157333333333, 0.16, 0.162666666667, 0.165333333333, 0.168, 0.170666666667, 0.173333333333, 0.176, 0.178666666667, 0.181333333333, 0.184, 0.186666666667, 0.189333333333, 0.192, 0.194666666667, 0.197333333333, 0.2, 0.202666666667, 0.205333333333, 0.208, 0.210666666667, 0.213333333333, 0.216, 0.218666666667, 0.221333333333, 0.224, 0.226666666667, 0.229333333333, 0.232, 0.234666666667, 0.237333333333, 0.24, 0.242666666667, 0.245333333333, 0.248, 0.250666666667, 0.253333333333, 0.256, 0.258666666667, 0.261333333333, 0.264, 0.266666666667, 0.269333333333, 0.272, 0.274666666667, 0.277333333333, 0.28, 0.282666666667, 0.285333333333, 0.288, 0.290666666667, 0.293333333333, 0.296, 0.298666666667, 0.301333333333, 0.304, 0.306666666667, 0.309333333333, 0.312, 0.314666666667, 0.317333333333, 0.32, 0.322666666667, 0.325333333333, 0.328, 0.330666666667, 0.333333333333, 0.336, 0.338666666667, 0.341333333333, 0.344, 0.346666666667, 0.349333333333, 0.352, 0.354666666667, 0.357333333333, 0.36, 0.362666666667, 0.365333333333, 0.368, 0.370666666667, 0.373333333333, 0.376, 0.378666666667, 0.381333333333, 0.384, 0.386666666667, 0.389333333333, 0.392, 0.394666666667, 0.397333333333, 0.4, 0.402666666667, 0.405333333333, 0.408, 0.410666666667, 0.413333333333, 0.416, 0.418666666667, 0.421333333333, 0.424, 0.426666666667, 0.429333333333, 0.432, 0.434666666667, 0.437333333333, 0.44, 0.442666666667, 0.445333333333, 0.448, 0.450666666667, 0.453333333333, 0.456, 0.458666666667, 0.461333333333, 0.464, 0.466666666667, 0.469333333333, 0.472, 0.474666666667, 0.477333333333, 0.48, 0.482666666667, 0.485333333333, 0.488, 0.490666666667, 0.493333333333, 0.496, 0.498666666667, 0.501333333333, 0.504, 0.506666666667, 0.509333333333, 0.512, 0.514666666667, 0.517333333333, 0.52, 0.522666666667, 0.525333333333, 0.528, 0.530666666667, 0.533333333333, 0.536, 0.538666666667, 0.541333333333, 0.544, 0.546666666667, 0.549333333333, 0.552, 0.554666666667, 0.557333333333, 0.56, 0.562666666667, 0.565333333333, 0.568, 0.570666666667, 0.573333333333, 0.576, 0.578666666667, 0.581333333333, 0.584, 0.586666666667, 0.589333333333, 0.592, 0.594666666667, 0.597333333333, 0.6, 0.602666666667, 0.605333333333, 0.608, 0.610666666667, 0.613333333333, 0.616, 0.618666666667, 0.621333333333, 0.624, 0.626666666667, 0.629333333333, 0.632, 0.634666666667, 0.637333333333, 0.64, 0.642666666667, 0.645333333333, 0.648, 0.650666666667, 0.653333333333, 0.656, 0.658666666667, 0.661333333333, 0.664, 0.666666666667, 0.669333333333, 0.672, 0.674666666667, 0.677333333333, 0.68, 0.682666666667, 0.685333333333, 0.688, 0.690666666667, 0.693333333333, 0.696, 0.698666666667, 0.701333333333, 0.704, 0.706666666667, 0.709333333333, 0.712, 0.714666666667, 0.717333333333, 0.72, 0.722666666667, 0.725333333333, 0.728, 0.730666666667, 0.733333333333, 0.736, 0.738666666667, 0.741333333333, 0.744, 0.746666666667, 0.749333333333, 0.752, 0.754666666667, 0.757333333333, 0.76, 0.762666666667, 0.765333333333, 0.768, 0.770666666667, 0.773333333333, 0.776, 0.778666666667, 0.781333333333, 0.784, 0.786666666667, 0.789333333333, 0.792, 0.794666666667, 0.797333333333, 0.8, 0.802666666667, 0.805333333333, 0.808, 0.810666666667, 0.813333333333, 0.816, 0.818666666667, 0.821333333333, 0.824, 0.826666666667, 0.829333333333, 0.832, 0.834666666667, 0.837333333333, 0.84, 0.842666666667, 0.845333333333, 0.848, 0.850666666667, 0.853333333333, 0.856, 0.858666666667, 0.861333333333, 0.864, 0.866666666667, 0.869333333333, 0.872, 0.874666666667, 0.877333333333, 0.88, 0.882666666667, 0.885333333333, 0.888, 0.890666666667, 0.893333333333, 0.896, 0.898666666667, 0.901333333333, 0.904, 0.906666666667, 0.909333333333, 0.912, 0.914666666667, 0.917333333333, 0.92, 0.922666666667, 0.925333333333, 0.928, 0.930666666667, 0.933333333333, 0.936, 0.938666666667, 0.941333333333, 0.944, 0.946666666667, 0.949333333333, 0.952, 0.954666666667, 0.957333333333, 0.96, 0.962666666667, 0.965333333333, 0.968, 0.970666666667, 0.973333333333, 0.976, 0.978666666667, 0.981333333333, 0.984, 0.986666666667, 0.989333333333, 0.992, 0.994666666667, 0.997333333333, 1.0, 1.00266666667, 1.00533333333, 1.008, 1.01066666667, 1.01333333333, 1.016, 1.01866666667, 1.02133333333, 1.024, 1.02666666667, 1.02933333333, 1.032, 1.03466666667, 1.03733333333, 1.04, 1.04266666667, 1.04533333333, 1.048, 1.05066666667, 1.05333333333, 1.056, 1.05866666667, 1.06133333333, 1.064, 1.06666666667, 1.06933333333, 1.072, 1.07466666667, 1.07733333333, 1.08, 1.08266666667, 1.08533333333, 1.088, 1.09066666667, 1.09333333333, 1.096, 1.09866666667, 1.10133333333, 1.104, 1.10666666667, 1.10933333333, 1.112, 1.11466666667, 1.11733333333, 1.12, 1.12266666667, 1.12533333333, 1.128, 1.13066666667, 1.13333333333, 1.136, 1.13866666667, 1.14133333333, 1.144, 1.14666666667, 1.14933333333, 1.152, 1.15466666667, 1.15733333333, 1.16, 1.16266666667, 1.16533333333, 1.168, 1.17066666667, 1.17333333333, 1.176, 1.17866666667, 1.18133333333, 1.184, 1.18666666667, 1.18933333333, 1.192, 1.19466666667, 1.19733333333, 1.2, 1.20266666667, 1.20533333333, 1.208, 1.21066666667, 1.21333333333, 1.216, 1.21866666667, 1.22133333333, 1.224, 1.22666666667, 1.22933333333, 1.232, 1.23466666667, 1.23733333333, 1.24, 1.24266666667, 1.24533333333, 1.248, 1.25066666667, 1.25333333333, 1.256, 1.25866666667, 1.26133333333, 1.264, 1.26666666667, 1.26933333333, 1.272, 1.27466666667, 1.27733333333, 1.28, 1.28266666667, 1.28533333333, 1.288, 1.29066666667, 1.29333333333, 1.296, 1.29866666667, 1.30133333333, 1.304, 1.30666666667, 1.30933333333, 1.312, 1.31466666667, 1.31733333333, 1.32, 1.32266666667, 1.32533333333, 1.328, 1.33066666667, 1.33333333333, 1.336, 1.33866666667, 1.34133333333, 1.344, 1.34666666667, 1.34933333333, 1.352, 1.35466666667, 1.35733333333, 1.36, 1.36266666667, 1.36533333333, 1.368, 1.37066666667, 1.37333333333, 1.376, 1.37866666667, 1.38133333333, 1.384, 1.38666666667, 1.38933333333, 1.392, 1.39466666667, 1.39733333333, 1.4, 1.40266666667, 1.40533333333, 1.408, 1.41066666667, 1.41333333333, 1.416, 1.41866666667, 1.42133333333, 1.424, 1.42666666667, 1.42933333333, 1.432, 1.43466666667, 1.43733333333, 1.44, 1.44266666667, 1.44533333333, 1.448, 1.45066666667, 1.45333333333, 1.456, 1.45866666667, 1.46133333333, 1.464, 1.46666666667, 1.46933333333, 1.472, 1.47466666667, 1.47733333333, 1.48, 1.48266666667, 1.48533333333, 1.488, 1.49066666667, 1.49333333333, 1.496, 1.49866666667, 1.50133333333, 1.504, 1.50666666667, 1.50933333333, 1.512, 1.51466666667, 1.51733333333, 1.52, 1.52266666667, 1.52533333333, 1.528, 1.53066666667, 1.53333333333, 1.536, 1.53866666667, 1.54133333333, 1.544, 1.54666666667, 1.54933333333, 1.552, 1.55466666667, 1.55733333333, 1.56, 1.56266666667, 1.56533333333, 1.568, 1.57066666667, 1.57333333333, 1.576, 1.57866666667, 1.58133333333, 1.584, 1.58666666667, 1.58933333333, 1.592, 1.59466666667, 1.59733333333, 1.6, 1.60266666667, 1.60533333333, 1.608, 1.61066666667, 1.61333333333, 1.616, 1.61866666667, 1.62133333333, 1.624, 1.62666666667, 1.62933333333, 1.632, 1.63466666667, 1.63733333333, 1.64, 1.64266666667, 1.64533333333, 1.648, 1.65066666667, 1.65333333333, 1.656, 1.65866666667, 1.66133333333, 1.664, 1.66666666667, 1.66933333333, 1.672, 1.67466666667, 1.67733333333, 1.68, 1.68266666667, 1.68533333333, 1.688, 1.69066666667, 1.69333333333, 1.696, 1.69866666667, 1.70133333333, 1.704, 1.70666666667, 1.70933333333, 1.712, 1.71466666667, 1.71733333333, 1.72, 1.72266666667, 1.72533333333, 1.728, 1.73066666667, 1.73333333333, 1.736, 1.73866666667, 1.74133333333, 1.744, 1.74666666667, 1.74933333333, 1.752, 1.75466666667, 1.75733333333, 1.76, 1.76266666667, 1.76533333333, 1.768, 1.77066666667, 1.77333333333, 1.776, 1.77866666667, 1.78133333333, 1.784, 1.78666666667, 1.78933333333, 1.792, 1.79466666667, 1.79733333333, 1.8, 1.80266666667, 1.80533333333, 1.808, 1.81066666667, 1.81333333333, 1.816, 1.81866666667, 1.82133333333, 1.824, 1.82666666667, 1.82933333333, 1.832,};
    static final double[] REAL_SIGNAL_Y = {1.17333333333, 1.17333333333, 1.17333333333, 1.17333333333, 1.16666666667, 1.16, 1.16, 1.16, 1.16, 1.16666666667, 1.17333333333, 1.17333333333, 1.17333333333, 1.18, 1.18, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.19333333333, 1.2, 1.2, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.22, 1.22, 1.22, 1.22666666667, 1.22666666667, 1.22666666667, 1.22666666667, 1.22666666667, 1.22666666667, 1.22666666667, 1.22, 1.21333333333, 1.20666666667, 1.20666666667, 1.20666666667, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.2, 1.2, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333, 1.18666666667, 1.19333333333, 1.2, 1.2, 1.21333333333, 1.24666666667, 1.29333333333, 1.35333333333, 1.48, 1.66666666667, 1.83333333333, 1.99333333333, 2.1, 2.26666666667, 2.26666666667, 2.26666666667, 2.26666666667, 2.26666666667, 2.5, 2.46, 2.38666666667, 2.27333333333, 2.12666666667, 1.92, 1.72666666667, 1.32666666667, 1.32666666667, 1.18666666667, 0.94, 0.88, 0.833333333333, 0.833333333333, 0.84, 0.86, 0.9, 0.933333333333, 0.953333333333, 1.0, 1.04666666667, 1.06, 1.08666666667, 1.1, 1.11333333333, 1.12, 1.13333333333, 1.13333333333, 1.14, 1.14666666667, 1.15333333333, 1.16, 1.16, 1.16, 1.16666666667, 1.16666666667, 1.16666666667, 1.17333333333, 1.17333333333, 1.17333333333, 1.18, 1.18, 1.18, 1.18666666667, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333, 1.2, 1.2, 1.2, 1.2, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.21333333333, 1.22, 1.22666666667, 1.23333333333, 1.24, 1.24666666667, 1.24666666667, 1.24666666667, 1.24666666667, 1.24666666667, 1.25333333333, 1.26, 1.26, 1.26666666667, 1.26666666667, 1.27333333333, 1.27333333333, 1.27333333333, 1.28, 1.28666666667, 1.3, 1.3, 1.31333333333, 1.31333333333, 1.32666666667, 1.33333333333, 1.34, 1.35333333333, 1.36, 1.37333333333, 1.37333333333, 1.38666666667, 1.4, 1.41333333333, 1.42, 1.43333333333, 1.44, 1.44666666667, 1.47333333333, 1.48666666667, 1.5, 1.51333333333, 1.52666666667, 1.54666666667, 1.55333333333, 1.56666666667, 1.58, 1.58666666667, 1.60666666667, 1.60666666667, 1.61333333333, 1.62666666667, 1.63333333333, 1.64, 1.64666666667, 1.64666666667, 1.64666666667, 1.64666666667, 1.64666666667, 1.64666666667, 1.64, 1.64, 1.62666666667, 1.61333333333, 1.6, 1.58666666667, 1.57333333333, 1.56, 1.54, 1.52666666667, 1.51333333333, 1.5, 1.48, 1.46, 1.43333333333, 1.42, 1.4, 1.38, 1.36, 1.34, 1.32666666667, 1.30666666667, 1.29333333333, 1.27333333333, 1.26666666667, 1.25333333333, 1.22666666667, 1.22, 1.21333333333, 1.20666666667, 1.19333333333, 1.18666666667, 1.18, 1.17333333333, 1.16666666667, 1.16, 1.14666666667, 1.14, 1.13333333333, 1.12666666667, 1.12666666667, 1.12666666667, 1.12, 1.12, 1.12, 1.11333333333, 1.11333333333, 1.11333333333, 1.11333333333, 1.10666666667, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.1, 1.10666666667, 1.10666666667, 1.10666666667, 1.11333333333, 1.12, 1.12, 1.12, 1.12, 1.12666666667, 1.12666666667, 1.12666666667, 1.12666666667, 1.13333333333, 1.13333333333, 1.14, 1.14, 1.14666666667, 1.14666666667, 1.16, 1.16, 1.16666666667, 1.16666666667, 1.17333333333, 1.17333333333, 1.17333333333, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18666666667, 1.18, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333, 1.18666666667, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.17333333333, 1.17333333333, 1.17333333333, 1.17333333333, 1.17333333333, 1.17333333333, 1.17333333333, 1.17333333333, 1.17333333333, 1.17333333333, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18666666667, 1.18666666667, 1.32666666667, 1.32666666667, 1.31333333333, 1.18, 1.18, 1.18, 1.18, 1.18, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.19333333333, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.18666666667, 1.19333333333, 1.19333333333, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.2, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.20666666667, 1.21333333333, 1.21333333333, 1.21333333333, 1.21333333333, 1.22, 1.21333333333, 1.21333333333, 1.21333333333, 1.21333333333, 1.21333333333, 1.21333333333, 1.21333333333, 1.21333333333, 1.21333333333, 1.21333333333, 1.22, 1.22, 1.22, 1.22666666667, 1.22666666667, 1.23333333333, 1.23333333333, 1.23333333333, 1.23333333333, 1.24, 1.24, 1.24, 1.24666666667, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24, 1.24666666667, 1.25333333333, 1.25333333333, 1.25333333333, 1.25333333333, 1.26, 1.26, 1.26666666667, 1.26666666667, 1.26666666667, 1.26666666667, 1.27333333333, 1.27333333333, 1.27333333333, 1.27333333333, 1.28, 1.28, 1.28, 1.28, 1.28666666667, 1.28666666667, 1.28666666667, 1.29333333333, 1.29333333333, 1.29333333333, 1.29333333333, 1.29333333333, 1.29333333333, 1.28666666667, 1.28, 1.28, 1.28, 1.28, 1.27333333333, 1.27333333333, 1.27333333333, 1.26666666667, 1.26666666667, 1.26666666667, 1.26666666667, 1.26666666667, 1.26666666667, 1.27333333333, 1.27333333333, 1.27333333333, 1.27333333333, 1.27333333333, 1.27333333333, 1.27333333333, 1.27333333333, 1.26666666667, 1.26666666667, 1.26, 1.26, 1.26, 1.25333333333, 1.25333333333, 1.26, 1.26, 1.26, 1.27333333333, 1.28666666667, 1.32, 1.32666666667, 1.34666666667, 1.47333333333, 1.58, 1.82, 2.04, 2.46, 2.64666666667, 2.68, 2.66666666667, 2.59333333333, 2.54666666667, 2.49333333333, 2.39333333333, 2.16, 2.09333333333, 1.90666666667, 1.75333333333, 1.58666666667, 1.43333333333, 1.28666666667, 1.16, 0.973333333333, 0.94, 0.886666666667, 0.88, 0.886666666667, 0.92, 0.953333333333, 1.0, 1.05333333333, 1.08666666667, 1.14666666667, 1.15333333333, 1.18, 1.18666666667, 1.20666666667, 1.21333333333, 1.22, 1.22, 1.22666666667, 1.23333333333, 1.23333333333, 1.24, 1.24, 1.24666666667, 1.25333333333, 1.25333333333, 1.25333333333, 1.26, 1.26, 1.26666666667, 1.26666666667, 1.26666666667, 1.27333333333, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28, 1.28666666667, 1.28666666667, 1.29333333333, 1.29333333333, 1.29333333333, 1.29333333333, 1.29333333333, 1.3, 1.30666666667, 1.30666666667, 1.31333333333, 1.31333333333, 1.32, 1.32, 1.32, 1.32666666667, 1.32666666667, 1.33333333333, 1.33333333333, 1.33333333333, 1.34, 1.34666666667, 1.34666666667, 1.35333333333, 1.35333333333, 1.36, 1.36666666667, 1.37333333333, 1.38, 1.38666666667, 1.39333333333, 1.39333333333, 1.40666666667, 1.41333333333, 1.42, 1.42666666667, 1.43333333333, 1.44, 1.44, 1.44666666667, 1.45333333333, 1.46666666667, 1.47333333333, 1.48, 1.5, 1.50666666667, 1.52666666667, 1.53333333333, 1.54666666667, 1.56, 1.57333333333, 1.59333333333, 1.6, 1.61333333333, 1.62666666667, 1.64, 1.65333333333, 1.66, 1.67333333333, 1.69333333333, 1.7, 1.70666666667, 1.71333333333, 1.72, 1.72, 1.72, 1.72, 1.72, 1.71333333333, 1.71333333333, 1.71333333333, 1.70666666667, 1.69333333333, 1.67333333333, 1.67333333333, 1.66666666667, 1.65333333333, 1.64, 1.60666666667, 1.6, 1.57333333333, 1.56666666667, 1.52666666667, 1.51333333333, 1.49333333333, 1.47333333333, 1.46, 1.44666666667, 1.43333333333, 1.4, 1.38666666667, 1.38, 1.36, 1.34666666667, 1.33333333333, 1.30666666667, 1.3, 1.28666666667, 1.28, 1.26666666667, 1.26, 1.25333333333, 1.24666666667, 1.23333333333, 1.23333333333, 1.23333333333, 1.22666666667, 1.22, 1.22, 1.21333333333, 1.21333333333, 1.20666666667, 1.20666666667, 1.2, 1.2, 1.2, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333, 1.19333333333,};
    static final double[] SIMPLE_SIGNAL_X = {0. ,   0.1,   0.2,   0.3,   0.4,
                                             0.5,   0.6,   0.7,   0.8,   0.9,
                                             1. ,   1.1,   1.2,   1.3,   1.4,
                                             1.5,   1.6,   1.7,   1.8,   1.9};

    static final double[] SIMPLE_SIGNAL_Y = {0.12,  0.77,  0.67,  0.75,  0.72,
                                             0.65,  0.51,  0.74,  0.93,  0.01,
                                             0.38,  0.18,  0.31,  0.88,  0.51,
                                             0.32,  0.16,  0.25,  0.81,  0.21};
    public static final int REAL_SIGNAL_LEN = 688;
    public static final int SIMPLE_SIGNAL_LEN = 20;
    private static final int SIMPLE_SIGNAL_PEAKS_LEN = 6;
    private static final int SIMPLE_SIGNAL_DEPRESSIONS_LEN = 7;
    private static final Integer[] SIMPLE_SIGNAL_PEAKS_POS = {1, 3, 8, 10, 13, 18};
    private static final Integer[] SIMPLE_SIGNAL_DEPRESSIONS_POS = {1, 3, 8, 10, 13, 18};

    private static final Integer[] REAL_SIGNAL_ALL_PEAKS_POS = {1, 33, 52, 81, 198, 291, 301, 342, 362, 404, 427, 461, 482, 508, 629};
    private static final Integer[] REAL_SIGNAL_ACUTE_PEAKS_POS = {81, 198, 342, 508, 629};
    private static final Integer[] REAL_SIGNAL_R_PEEKS_POS = {81, 508};
    private static final Integer[] REAL_SIGNAL_T_PEEKS_POS = {198, 629};


    EkgExaminer eSimple;
    EkgExaminer eReal;

    @Before
    public void ekgExaminer_setup() {
        eReal = new EkgExaminer(REAL_SIGNAL_X, REAL_SIGNAL_Y);
        eSimple = new EkgExaminer(SIMPLE_SIGNAL_X, SIMPLE_SIGNAL_Y);
    }
    @Test
    public void ekgExaminer_testArrays() {
        Assert.assertEquals(REAL_SIGNAL_X.length, REAL_SIGNAL_LEN);
        Assert.assertEquals(REAL_SIGNAL_Y.length, REAL_SIGNAL_LEN);
        Assert.assertEquals(SIMPLE_SIGNAL_X.length, SIMPLE_SIGNAL_LEN);
        Assert.assertEquals(SIMPLE_SIGNAL_Y.length, SIMPLE_SIGNAL_LEN);
    }
    @Test
    public void ekgExaminer_SampleSignal_testPeaks() {
        //eSimple.setVoltageSignificancy(0.);
        LinkedList<Integer> peaks = eSimple.getPeaksPositions();
        Assert.assertArrayEquals(SIMPLE_SIGNAL_PEAKS_POS, peaks.toArray());
    }

    @Test
    public void ekgExaminer_RealEKG_testPeaks() {
        //eReal.setVoltageSignificancy(0.01);
        LinkedList<Integer> peaks;
        peaks = eReal.getPeaksPositions();
        Assert.assertArrayEquals(REAL_SIGNAL_ALL_PEAKS_POS, peaks.toArray());

    }
    @Test
    public void ekgExaminer_RealEKG_testAcutePeaks() {
        LinkedList<Integer> peaks;
        peaks = eReal.getAcutePeaksPositions();
        Assert.assertArrayEquals(REAL_SIGNAL_ACUTE_PEAKS_POS, peaks.toArray());
    }

    @Test
    public void ekgExaminer_RealEKG_testFrequency() {
        double frequency = eReal.getFrequency();
        double expected_using_r = 60/(REAL_SIGNAL_X[REAL_SIGNAL_R_PEEKS_POS[1]] - REAL_SIGNAL_X[REAL_SIGNAL_R_PEEKS_POS[0]]);
        double expected_using_t = 60/(REAL_SIGNAL_X[REAL_SIGNAL_T_PEEKS_POS[1]] - REAL_SIGNAL_X[REAL_SIGNAL_T_PEEKS_POS[0]]);

        double expected = StatUtils.mean(new double[] {expected_using_r, expected_using_t});
        double delta = Math.abs(expected_using_r - expected_using_t);
        Assert.assertEquals(expected, frequency, delta);
    }

}
